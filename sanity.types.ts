/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Comment = {
  _id: string;
  _type: "comment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  content?: string;
  post?: Post;
  author?: User;
  publishedAt?: string;
  parentComment?: Comment;
  likes?: number;
  dislikes?: number;
  isEdited?: boolean;
  lastEditedAt?: string;
  pixelArtUrl?: string;
  isDeleted?: boolean;
  reportCount?: number;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: string;
  content?:
    | Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "normal"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>
    | string;
  excerpt?: string;
  author?: User;
  topicSlug?: Topic["slug"];
  topic?: Topic;
  publishedAt?: string;
  postType?:
    | "text"
    | "pixelArt"
    | "animation"
    | "tutorial"
    | "resource"
    | "question";
  imageUrl?: string;
  dimensions?: {
    width?: number;
    height?: number;
  };
  software?: Array<string>;
  colorPalette?: Array<{
    hex?: string;
    name?: string;
    _key: string;
  }>;
  difficulty?: "beginner" | "intermediate" | "advanced";
  timeSpent?: number;
  tutorialSteps?: Array<{
    title?: string;
    description?: string;
    imageUrl?: string;
    _key: string;
  }>;
  likes?: number;
  dislikes?: number;
  tags?: Array<string>;
  isOriginal?: boolean;
  inspirationSource?: string;
  reactions?: Reaction[];
  commentsCount?: number;
  reportCount?: number;
};

export type Topic = {
  _id: string;
  _type: "topic";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: string;
  description?: string;
  iconUrl?: string;
  bannerUrl?: string;
  postCount?: number;
  reportCount?: number;
};

export type User = {
  _id: string;
  _type: "user";
  _updatedAt: string;
  _rev: string;
  username?: string;
  fullName?: string;
  email?: string;
  bio?: string;
  clerkId?: string;
  createdAt?: string;
  isReported?: boolean;
  isBanned?: boolean;
  imageUrl?: string;
  role?: "user" | "admin" | "moderator";
  postCount?: number;
  commentCount?: number;
  receivedLikes?: number;
  mostActiveTopic?: Topic;
  favoriteTopics?: Topic[];
  reportCount?: number;
};

export type Reaction = {
  user: User;
  type: "like" | "dislike" | null;
  _key: string;
};

// Update your Report type definition
export type Report = {
  _id: string;
  _type: "report";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  displayId: string;
  contentType: "post" | "comment" | "user";
  content: { _ref: string; _type: "reference" };
  reportedContent?: Post | Comment | User; // Populated by GROQ query
  reason:
    | "spam"
    | "inappropriate"
    | "harassment"
    | "violence"
    | "copyright"
    | "other";
  additionalInfo?: string;
  reportedAt: string;
  status: "pending" | "resolved" | "rejected";
  reporter: User;
  moderatedBy?: User;
  moderationNotes?: string;
  moderatedAt?: string;
};

export function isPostContent(content: any): content is Post {
  return content?._type === "post";
}

export function isCommentContent(content: any): content is Comment {
  return content?._type === "comment";
}

export function isUserContent(content: any): content is User {
  return content?._type === "user";
}

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Comment
  | Post
  | Topic
  | User
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
